/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jframes;

import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import juego.Arma;
import juego.Enemigo;
import juego.Fuggie;
import juego.MainCharacter;
import juego.Martillo;
import juego.Personaje;

/**
 *
 * @author kroctus
 */
public class CombateTutorial extends javax.swing.JFrame {

    /**
     * Creates new form CombateTutorial
     */
    private static boolean turno; // gestiona el control de los turnos true= turno jugador, false = turno enemmigo
    private static boolean finPelea; //marca cuando se acaba la pelea que será cuando alguna de las barras de vida ya sean del enemigo o el jugador caigan al suelo , true= pelea acaba, false= pelea sigue
    private static boolean jugadorPierde; // indica si el jugador esta muerto o no 
    private static boolean jugadorGana; // indica si el jugador gana.
    private Icon imgDescHabilidades; //imagen de la descripción de las habilidades.
    private int contBotonPersonaje;

    /*Estado de las habilidades*/
    /*Esto nos permitora controlar que habilidad se ha seleccionado o no */
    private static boolean eImpacto;
    private static boolean eSlam;
    private static boolean eBigSlam;
    private static boolean eRompe;
    private static boolean ePostura;
    private static boolean eCastigo;

    /*Contadores para las habilidades*/
    private int contadorSlam;
    private int contadorBigSlam;
    private int contadorCastigo;
    private int contadorRompe;
    private int contadorPostura;
    private int contadorImpacto;

    private boolean bloqueo = true;

    /*Creamos al enemigo*/
    //Enemigo del tutorial fuggie
    private static Fuggie fuggie = new Fuggie("Fuggie", "Tanque", new Arma(), 50.0, 10.0, 1, 1000000);

    //Personaje principal
    /*  private String nombre;
     private String clase;
     private Arma arma;
     private Double vida;
     private Double mp;
     private int defensa;*/
    /*Arma para el personaje principal*/
    private static Martillo ancelot = new Martillo(25.0, "Anecelot", 100.0, false);
    private static MainCharacter alice = new MainCharacter("Alice", "Demonio", ancelot, 200.0, 250.0, 100) {
        @Override
        public void subirDeNivel() {
            alice.setMp(alice.getMp() + 50);
            alice.setVida(alice.getVida() + 50);
            alice.setDefensa((int) (alice.getDefensa() + 50));
        }
    };

    public CombateTutorial() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    public static void gestionJuego() {

        /*JUEGO*/ /*JUEGO*/ /*JUEGO*/ /*JUEGO*/ /*JUEGO*/ /*JUEGO*/


        /*Si se quedan sin vida alguno de los dos se acabe el combate*/
//        if (alice.getVida() <= 0) {
//            jugadorPierde = true;
//            finPelea = true;
//            JOptionPane.showMessageDialog(null, "ESTAS MUERTO");
//        } else if (fuggie.getVida() <= 0) {
//            jugadorGana = true;
//            finPelea = true;
//
//            JOptionPane.showMessageDialog(null, "COMBATE TERMINADO, GANA EL JUGADOR");
//        }

        /*GESTIÓN DE TURNOS*/

        if (turno == true) {
            reverlarHabilidades();
        } else {
            ocultarHabilidades();

            /*ATACA EL ENEMIGO*/
            ataqueFuggieTuto();
        }

    }


    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fueguitoReducido = new javax.swing.JLabel();
        partidaGuardada = new javax.swing.JLabel();
        guardar = new javax.swing.JLabel();
        guardarButtom = new javax.swing.JButton();
        siguienteFase = new javax.swing.JButton();
        estapaCompletada = new javax.swing.JLabel();
        estasMuerto = new javax.swing.JLabel();
        okButtom = new javax.swing.JButton();
        derrota = new javax.swing.JLabel();
        derrotaButtom = new javax.swing.JButton();
        fueguitoDurmiendo = new javax.swing.JLabel();
        siguiente = new javax.swing.JButton();
        victoria = new javax.swing.JLabel();
        victoriaButtom = new javax.swing.JButton();
        escudoPj = new javax.swing.JLabel();
        manaPj = new javax.swing.JLabel();
        vidaPj = new javax.swing.JLabel();
        protaImg = new javax.swing.JLabel();
        pjStats = new javax.swing.JLabel();
        EscudoFuggie = new javax.swing.JLabel();
        magiaFuggie = new javax.swing.JLabel();
        vidaFuggie = new javax.swing.JLabel();
        labelEnemigo = new javax.swing.JLabel();
        vidFuggieLabel = new javax.swing.JLabel();
        slamButtom = new javax.swing.JButton();
        posturaButtomS = new javax.swing.JButton();
        rompeCorazonesButtomS = new javax.swing.JButton();
        impactoMeteoricoButtomS = new javax.swing.JButton();
        bigSlamButtomS = new javax.swing.JButton();
        slamButtomS = new javax.swing.JButton();
        impactoMeteoricoButtom = new javax.swing.JButton();
        posturaButtom = new javax.swing.JButton();
        bigSlamButtom1 = new javax.swing.JButton();
        rompeCorazonesButtom = new javax.swing.JButton();
        castigoDivinoButtom = new javax.swing.JButton();
        desHabilidadesLabel = new javax.swing.JLabel();
        fondoLabel = new javax.swing.JLabel();
        botonPersonaje = new javax.swing.JButton();
        personajeButtom = new javax.swing.JButton();
        fueguitoButtom = new javax.swing.JButton();
        salirDelJuego = new javax.swing.JButton();
        reintentar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("AshesOfTheForgottenWorld");
        setMinimumSize(new java.awt.Dimension(1920, 1080));
        setSize(new java.awt.Dimension(1920, 1080));
        getContentPane().setLayout(null);

        fueguitoReducido.setVisible(false);
        fueguitoReducido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/imagenes/fueguito_bien_reducido2.png"))); // NOI18N
        getContentPane().add(fueguitoReducido);
        fueguitoReducido.setBounds(1810, 20, 100, 90);

        partidaGuardada.setVisible(false);
        partidaGuardada.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        partidaGuardada.setForeground(new java.awt.Color(255, 255, 0));
        partidaGuardada.setText("Partida guardada");
        getContentPane().add(partidaGuardada);
        partidaGuardada.setBounds(1300, 910, 340, 50);

        guardar.setVisible(false);
        guardar.setBackground(new java.awt.Color(204, 0, 204));
        guardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/imagenes/simbolo_guardarPe.png"))); // NOI18N
        getContentPane().add(guardar);
        guardar.setBounds(1650, 890, 70, 70);

        guardarButtom.setVisible(false);
        guardarButtom.setBackground(new java.awt.Color(204, 0, 204));
        guardarButtom.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        guardarButtom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarButtomActionPerformed(evt);
            }
        });
        getContentPane().add(guardarButtom);
        guardarButtom.setBounds(1640, 890, 80, 70);

        siguienteFase.setVisible(false);
        siguienteFase.setBackground(new java.awt.Color(204, 0, 204));
        siguienteFase.setForeground(new java.awt.Color(204, 0, 204));
        siguienteFase.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/imagenes/siguientePe.png"))); // NOI18N
        siguienteFase.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        siguienteFase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                siguienteFaseActionPerformed(evt);
            }
        });
        getContentPane().add(siguienteFase);
        siguienteFase.setBounds(1730, 890, 120, 70);

        estapaCompletada.setVisible(false);
        estapaCompletada.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/imagenes/subisteDeNivel2.png"))); // NOI18N
        getContentPane().add(estapaCompletada);
        estapaCompletada.setBounds(0, 0, 1920, 1080);

        estasMuerto.setVisible(false);
        estasMuerto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/imagenes/estasMuerto.png"))); // NOI18N
        getContentPane().add(estasMuerto);
        estasMuerto.setBounds(0, 0, 1920, 1080);

        okButtom.setVisible(false);
        okButtom.setFont(new java.awt.Font("Tahoma", 3, 36)); // NOI18N
        okButtom.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/imagenes/ok.png"))); // NOI18N
        okButtom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtomActionPerformed(evt);
            }
        });
        getContentPane().add(okButtom);
        okButtom.setBounds(1470, 440, 260, 100);

        derrota.setVisible(false);
        derrota.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/imagenes/muerte2.png"))); // NOI18N
        derrota.setText("hola");
        derrota.setPreferredSize(new java.awt.Dimension(1920, 1080));
        getContentPane().add(derrota);
        derrota.setBounds(0, 0, 1920, 1080);

        derrotaButtom.setVisible(false);
        derrotaButtom.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        derrotaButtom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                derrotaButtomActionPerformed(evt);
            }
        });
        getContentPane().add(derrotaButtom);
        derrotaButtom.setBounds(433, 403, 1020, 150);

        fueguitoDurmiendo.setVisible(false);
        fueguitoDurmiendo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/imagenes/fueguitoDurmiendo2.png"))); // NOI18N
        getContentPane().add(fueguitoDurmiendo);
        fueguitoDurmiendo.setBounds(0, 0, 1920, 1080);

        siguiente.setBackground(new java.awt.Color(255, 204, 102));
        siguiente.setForeground(new java.awt.Color(153, 255, 153));
        siguiente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/imagenes/siguientePe.png"))); // NOI18N
        siguiente.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        siguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                siguienteActionPerformed(evt);
            }
        });
        getContentPane().add(siguiente);
        siguiente.setBounds(1700, 940, 150, 80);

        victoria.setVisible(false);
        victoria.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/imagenes/victoria2.png"))); // NOI18N
        victoria.setText("hola");
        victoria.setPreferredSize(new java.awt.Dimension(1920, 1080));
        getContentPane().add(victoria);
        victoria.setBounds(0, 0, 1920, 1080);

        victoriaButtom.setVisible(false);
        victoriaButtom.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        victoriaButtom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                victoriaButtomActionPerformed(evt);
            }
        });
        getContentPane().add(victoriaButtom);
        victoriaButtom.setBounds(593, 473, 890, 160);

        escudoPj.setVisible(false);
        escudoPj.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        getContentPane().add(escudoPj);
        escudoPj.setBounds(240, 900, 160, 30);

        manaPj.setVisible(false);
        manaPj.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        getContentPane().add(manaPj);
        manaPj.setBounds(160, 870, 160, 30);

        vidaPj.setVisible(false);
        vidaPj.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        getContentPane().add(vidaPj);
        vidaPj.setBounds(160, 830, 160, 30);

        protaImg.setVisible(false);
        protaImg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/imagenes/prota_reducido3(1).png"))); // NOI18N
        getContentPane().add(protaImg);
        protaImg.setBounds(130, 620, 280, 390);

        pjStats.setVisible(false);
        pjStats.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/imagenes/cuadroStats (2).png"))); // NOI18N
        getContentPane().add(pjStats);
        pjStats.setBounds(80, 820, 290, 120);

        EscudoFuggie.setVisible(false);
        EscudoFuggie.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        EscudoFuggie.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(EscudoFuggie);
        EscudoFuggie.setBounds(1120, 120, 120, 30);

        magiaFuggie.setVisible(false);
        magiaFuggie.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        magiaFuggie.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(magiaFuggie);
        magiaFuggie.setBounds(1060, 80, 180, 30);

        vidaFuggie.setVisible(false);
        vidaFuggie.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        vidaFuggie.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(vidaFuggie);
        vidaFuggie.setBounds(1050, 50, 180, 30);

        labelEnemigo.setVisible(false);
        labelEnemigo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/imagenes/funggie1_nofondo3(1).png"))); // NOI18N
        getContentPane().add(labelEnemigo);
        labelEnemigo.setBounds(1150, -60, 580, 720);

        vidFuggieLabel.setVisible(false);
        vidFuggieLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/imagenes/fuggie_vid2.jpg"))); // NOI18N
        getContentPane().add(vidFuggieLabel);
        vidFuggieLabel.setBounds(980, 30, 280, 150);

        slamButtom.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/imagenes/ataque_f.png"))); // NOI18N
        slamButtom.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        slamButtom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                slamButtomActionPerformed(evt);
            }
        });
        getContentPane().add(slamButtom);
        slamButtom.setBounds(1050, 60, 240, 280);

        posturaButtomS.setVisible(false);
        posturaButtomS.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/imagenes/F_skill_posturaDeValkiria.png"))); // NOI18N
        posturaButtomS.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        posturaButtomS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                posturaButtomSActionPerformed(evt);
            }
        });
        getContentPane().add(posturaButtomS);
        posturaButtomS.setBounds(1340, 660, 240, 280);

        rompeCorazonesButtomS.setVisible(false);
        rompeCorazonesButtomS.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/imagenes/F_skill_quebrantadorDeCorazones_1.png"))); // NOI18N
        rompeCorazonesButtomS.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        rompeCorazonesButtomS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rompeCorazonesButtomSActionPerformed(evt);
            }
        });
        getContentPane().add(rompeCorazonesButtomS);
        rompeCorazonesButtomS.setBounds(1580, 660, 240, 280);

        impactoMeteoricoButtomS.setVisible(false);
        impactoMeteoricoButtomS.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/imagenes/F_skill_impactoMeteorico_1.png"))); // NOI18N
        impactoMeteoricoButtomS.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        impactoMeteoricoButtomS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                impactoMeteoricoButtomSActionPerformed(evt);
            }
        });
        getContentPane().add(impactoMeteoricoButtomS);
        impactoMeteoricoButtomS.setBounds(1100, 660, 240, 280);

        bigSlamButtomS.setVisible(false);
        bigSlamButtomS.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/imagenes/F_skill_slam.png"))); // NOI18N
        bigSlamButtomS.setContentAreaFilled(false);
        bigSlamButtomS.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bigSlamButtomS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bigSlamButtomSActionPerformed(evt);
            }
        });
        getContentPane().add(bigSlamButtomS);
        bigSlamButtomS.setBounds(860, 660, 240, 280);

        slamButtomS.setVisible(true);
        slamButtomS.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/imagenes/ataque_f.png"))); // NOI18N
        slamButtomS.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        slamButtomS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                slamButtomSActionPerformed(evt);
            }
        });
        getContentPane().add(slamButtomS);
        slamButtomS.setBounds(620, 660, 240, 280);

        impactoMeteoricoButtom.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/imagenes/F_skill_impactoMeteorico_1.png"))); // NOI18N
        impactoMeteoricoButtom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                impactoMeteoricoButtomActionPerformed(evt);
            }
        });
        getContentPane().add(impactoMeteoricoButtom);
        impactoMeteoricoButtom.setBounds(1050, 340, 240, 280);

        posturaButtom.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/imagenes/F_skill_posturaDeValkiria.png"))); // NOI18N
        posturaButtom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                posturaButtomActionPerformed(evt);
            }
        });
        getContentPane().add(posturaButtom);
        posturaButtom.setBounds(1330, 340, 240, 280);

        bigSlamButtom1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/imagenes/F_skill_slam.png"))); // NOI18N
        bigSlamButtom1.setContentAreaFilled(false);
        bigSlamButtom1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bigSlamButtom1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bigSlamButtom1ActionPerformed(evt);
            }
        });
        getContentPane().add(bigSlamButtom1);
        bigSlamButtom1.setBounds(1330, 60, 240, 280);

        rompeCorazonesButtom.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/imagenes/F_skill_quebrantadorDeCorazones_1.png"))); // NOI18N
        rompeCorazonesButtom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rompeCorazonesButtomActionPerformed(evt);
            }
        });
        getContentPane().add(rompeCorazonesButtom);
        rompeCorazonesButtom.setBounds(1600, 350, 240, 270);

        castigoDivinoButtom.setVisible(false);
        castigoDivinoButtom.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/imagenes/F_skill_castigoDivino_1.png"))); // NOI18N
        castigoDivinoButtom.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        castigoDivinoButtom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                castigoDivinoButtomActionPerformed(evt);
            }
        });
        getContentPane().add(castigoDivinoButtom);
        castigoDivinoButtom.setBounds(1600, 60, 240, 280);

        setVisible(true);
        getContentPane().add(desHabilidadesLabel);
        desHabilidadesLabel.setBounds(50, 60, 910, 550);

        fondoLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/imagenes/bannerSkills1.png"))); // NOI18N
        fondoLabel.setText("hola");
        fondoLabel.setPreferredSize(new java.awt.Dimension(1920, 1080));
        getContentPane().add(fondoLabel);
        fondoLabel.setBounds(0, 0, 1920, 1080);

        botonPersonaje.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botonPersonaje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonPersonajeActionPerformed(evt);
            }
        });
        getContentPane().add(botonPersonaje);
        botonPersonaje.setBounds(30, 570, 470, 510);

        personajeButtom.setVisible(false);
        personajeButtom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                personajeButtomActionPerformed(evt);
            }
        });
        getContentPane().add(personajeButtom);
        personajeButtom.setBounds(70, 740, 310, 250);

        fueguitoButtom.setVisible(false);
        fueguitoButtom.setBackground(new java.awt.Color(146, 2, 2));
        fueguitoButtom.setForeground(new java.awt.Color(146, 2, 2));
        fueguitoButtom.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        fueguitoButtom.setFocusCycleRoot(true);
        fueguitoButtom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fueguitoButtomActionPerformed(evt);
            }
        });
        getContentPane().add(fueguitoButtom);
        fueguitoButtom.setBounds(1760, 30, 130, 120);

        salirDelJuego.setVisible(false);
        salirDelJuego.setText("jButton1");
        salirDelJuego.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirDelJuegoActionPerformed(evt);
            }
        });
        getContentPane().add(salirDelJuego);
        salirDelJuego.setBounds(660, 120, 590, 170);

        reintentar.setVisible(false);
        reintentar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reintentarActionPerformed(evt);
            }
        });
        getContentPane().add(reintentar);
        reintentar.setBounds(670, 360, 580, 170);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /*JUEGO*/ /*JUEGO*/ /*JUEGO*/ /*JUEGO*/ /*JUEGO*/ /*JUEGO*/

    /*metodo que oculta las habilidades cuando no sea el turno del jugador*/




    public static void ocultarHabilidades() {

        slamButtomS.setVisible(false);
        bigSlamButtomS.setVisible(false);
        impactoMeteoricoButtomS.setVisible(false);
        rompeCorazonesButtomS.setVisible(false);
        posturaButtomS.setVisible(false);
    }

    /*Método contrario*/
    public static void reverlarHabilidades() {

        slamButtomS.setVisible(true);

        if (eBigSlam == true) {
            bigSlamButtomS.setVisible(true);
        }

        if (eImpacto == true) {
            impactoMeteoricoButtomS.setVisible(true);
        }

        if (eRompe == true) {
            rompeCorazonesButtomS.setVisible(true);
        }
        if (ePostura == true) {
            posturaButtomS.setVisible(true);
        }

    }

    /*Método que que simula el atque de fuggie*/
    public static void ataqueFuggieTuto() {
        JOptionPane.showMessageDialog(null, "FUGGIE ATACA");
        double daño = fuggie.ataqueFuggie();
        alice.perderVida(daño, alice);

        turno = true;
        gestionJuego();
    }

    private void castigoDivinoButtomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_castigoDivinoButtomActionPerformed
        /*Devolvemos a 0 los valores de los contadores siempre que se pulse una diferente, salvo la que hace referencia al mismo boton*/
        contadorSlam = 0;
        contadorBigSlam = 0;

        contadorRompe = 0;
        contadorPostura = 0;
        contadorImpacto = 0;

        switch (contadorCastigo) {

            case 0:
                desHabilidadesLabel.setVisible(true);
                imgDescHabilidades = new ImageIcon(getClass().getResource("../imagenes/imagenes/des_castigoDivino..png"));
                desHabilidadesLabel.setIcon(imgDescHabilidades);
                contadorCastigo++;
                break;

            case 1:
                contadorCastigo++;
                break;
            case 2:
                break;

        }
    }//GEN-LAST:event_castigoDivinoButtomActionPerformed

    private void slamButtomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_slamButtomActionPerformed

        /*Devolvemos a 0 los valores de los contadores siempre que se pulse una diferente, salvo la que hace referencia al mismo boton*/
        /*Con esto conseguimos que cuando de seleccione un boton deiferente se muestre la descripción de este 
         y cuando se pulse de nuevo el anterior se muestre la descripción de este y no que se seleccione*/
        contadorBigSlam = 0;
        contadorCastigo = 0;
        contadorRompe = 0;
        contadorPostura = 0;
        contadorImpacto = 0;

        switch (contadorSlam) {

            case 0:
                desHabilidadesLabel.setVisible(true);
                imgDescHabilidades = new ImageIcon(getClass().getResource("../imagenes/imagenes/des_slam.png"));
                desHabilidadesLabel.setIcon(imgDescHabilidades);
                contadorSlam++;
                break;

            case 1:
                JOptionPane.showMessageDialog(null, "ESTA HABILIDAD YA ESTA SELECCIONADA");
                contadorSlam++;
                break;
            case 2:
                JOptionPane.showMessageDialog(null, "YA ESTA SELECCIONADA");
                contadorSlam++;
                break;
            case 3:
                JOptionPane.showMessageDialog(null, "PLS STOP....");
                contadorSlam++;
                break;
            case 4:
                JOptionPane.showMessageDialog(null, ".....");
                break;

        }


    }//GEN-LAST:event_slamButtomActionPerformed

    private void bigSlamButtom1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bigSlamButtom1ActionPerformed

        /*Devolvemos a 0 los valores de los contadores siempre que se pulse una diferente, salvo la que hace referencia al mismo boton*/
        /*Con esto conseguimos que cuando de seleccione un boton deiferente se muestre la descripción de este 
         y cuando se pulse de nuevo el anterior se muestre la descripción de este y no que se seleccione*/
        contadorSlam = 0;
        contadorCastigo = 0;
        contadorRompe = 0;
        contadorPostura = 0;
        contadorImpacto = 0;

        switch (contadorBigSlam) {

            case 0:
                desHabilidadesLabel.setVisible(true);
                imgDescHabilidades = new ImageIcon(getClass().getResource("../imagenes/imagenes/des_bigSlam.png"));
                desHabilidadesLabel.setIcon(imgDescHabilidades);
                contadorBigSlam++;
                break;

            case 1:
                desHabilidadesLabel.setVisible(false);
                bigSlamButtomS.setVisible(true);
                contadorBigSlam++;
                eBigSlam = true;
                break;
            case 2:
                bigSlamButtomS.setVisible(false);
                contadorBigSlam = 0;
                eBigSlam = false;
                break;

        }
    }//GEN-LAST:event_bigSlamButtom1ActionPerformed

    private void impactoMeteoricoButtomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_impactoMeteoricoButtomActionPerformed
        /*Devolvemos a 0 los valores de los contadores siempre que se pulse una diferente, salvo la que hace referencia al mismo boton*/
        /*Con esto conseguimos que cuando de seleccione un boton deiferente se muestre la descripción de este 
         y cuando se pulse de nuevo el anterior se muestre la descripción de este y no que se seleccione*/
        contadorSlam = 0;
        contadorBigSlam = 0;
        contadorCastigo = 0;
        contadorRompe = 0;
        contadorPostura = 0;

        switch (contadorImpacto) {

            case 0:
                desHabilidadesLabel.setVisible(true);
                imgDescHabilidades = new ImageIcon(getClass().getResource("../imagenes/imagenes/des_impactoMeteorico.png"));
                desHabilidadesLabel.setIcon(imgDescHabilidades);
                contadorImpacto++;
                break;
            case 1:
                desHabilidadesLabel.setVisible(false);
                impactoMeteoricoButtomS.setVisible(true);
                contadorImpacto++;
                eImpacto = true;
                break;
            case 2:
                impactoMeteoricoButtomS.setVisible(false);
                contadorImpacto = 0;
                eImpacto = false;
                break;

        }

    }//GEN-LAST:event_impactoMeteoricoButtomActionPerformed

    private void posturaButtomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_posturaButtomActionPerformed
        /*Devolvemos a 0 los valores de los contadores siempre que se pulse una diferente, salvo la que hace referencia al mismo boton*/
        /*Con esto conseguimos que cuando de seleccione un boton deiferente se muestre la descripción de este 
         y cuando se pulse de nuevo el anterior se muestre la descripción de este y no que se seleccione*/
        contadorSlam = 0;
        contadorBigSlam = 0;
        contadorCastigo = 0;
        contadorRompe = 0;

        contadorImpacto = 0;

        switch (contadorPostura) {

            case 0:
                desHabilidadesLabel.setVisible(true);
                imgDescHabilidades = new ImageIcon(getClass().getResource("../imagenes/imagenes/des_posturaDeValkiria.png"));
                desHabilidadesLabel.setIcon(imgDescHabilidades);
                contadorPostura++;
                break;
            case 1:
                desHabilidadesLabel.setVisible(false);
                posturaButtomS.setVisible(true);
                contadorPostura++;
                ePostura = true;
                break;
            case 2:
                posturaButtomS.setVisible(false);
                contadorPostura = 0;
                ePostura = false;
                break;

        }
    }//GEN-LAST:event_posturaButtomActionPerformed

    private void rompeCorazonesButtomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rompeCorazonesButtomActionPerformed
        /*Devolvemos a 0 los valores de los contadores siempre que se pulse una diferente, salvo la que hace referencia al mismo boton*/
        /*Con esto conseguimos que cuando de seleccione un boton deiferente se muestre la descripción de este 
         y cuando se pulse de nuevo el anterior se muestre la descripción de este y no que se seleccione*/
        contadorSlam = 0;
        contadorBigSlam = 0;
        contadorCastigo = 0;

        contadorPostura = 0;
        contadorImpacto = 0;

        switch (contadorRompe) {

            case 0:
                desHabilidadesLabel.setVisible(true);
                imgDescHabilidades = new ImageIcon(getClass().getResource("../imagenes/imagenes/des_quebrantadorDeCorazones.png"));
                desHabilidadesLabel.setIcon(imgDescHabilidades);
                contadorRompe++;
                break;
            case 1:
                desHabilidadesLabel.setVisible(false);
                rompeCorazonesButtomS.setVisible(true);
                contadorRompe++;
                eRompe = true;
                break;

            case 2:
                rompeCorazonesButtomS.setVisible(false);
                contadorRompe = 0;
                eRompe = false;
                break;

        }
    }//GEN-LAST:event_rompeCorazonesButtomActionPerformed

    private void slamButtomSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_slamButtomSActionPerformed

        if (bloqueo == false) {
            JOptionPane.showMessageDialog(null, "HAS UTILIZADO SLAM");

            double daño = ancelot.slam(alice);
            fuggie.quitarVida(daño, fuggie);
            turno = false;
            vidaFuggie.setText(fuggie.getVida().toString());
            magiaFuggie.setText(fuggie.getMp().toString());
            EscudoFuggie.setText(String.valueOf(fuggie.getDefensa()));

            /*Actualizamos los datos del personaje*/
            vidaPj.setText(alice.getVida().toString());
            manaPj.setText(alice.getMp().toString());
            escudoPj.setText(String.valueOf(alice.getDefensa()));

            /*Si se quedan sin vida alguno de los dos se acabe el combate*/
            if (alice.getVida() <= 0) {
                jugadorPierde = true;
                finPelea = true;
                derrota.setVisible(true);
                derrotaButtom.setVisible(true);
                reintentar.setVisible(true);
                salirDelJuego.setVisible(true);
            } else if (fuggie.getVida() <= 0) {
                jugadorGana = true;
                finPelea = true;
                victoria.setVisible(true);

                victoriaButtom.setVisible(true);
            } else {
                gestionJuego();
            }
        }

        vidaFuggie.setText(fuggie.getVida().toString());
        magiaFuggie.setText(fuggie.getMp().toString());
        EscudoFuggie.setText(String.valueOf(fuggie.getDefensa()));

        /*Actualizamos los datos del personaje*/
        vidaPj.setText(alice.getVida().toString());
        manaPj.setText(alice.getMp().toString());
        escudoPj.setText(String.valueOf(alice.getDefensa()));

    }//GEN-LAST:event_slamButtomSActionPerformed

    private void bigSlamButtomSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bigSlamButtomSActionPerformed

        if (bloqueo == false) {

            JOptionPane.showMessageDialog(null, "HAS UTILIZADO BIG SLAM");

            double daño = ancelot.bigSlam(alice);
            fuggie.quitarVida(daño, fuggie);
            if (daño == 0.00) {
                turno = true;
            } else {
                vidaFuggie.setText(fuggie.getVida().toString());
                magiaFuggie.setText(fuggie.getMp().toString());
                EscudoFuggie.setText(String.valueOf(fuggie.getDefensa()));

                /*Actualizamos los datos del personaje*/
                vidaPj.setText(alice.getVida().toString());
                manaPj.setText(alice.getMp().toString());
                escudoPj.setText(String.valueOf(alice.getDefensa()));
                turno = false;
            }

            /*Si se quedan sin vida alguno de los dos se acabe el combate*/
            if (alice.getVida() <= 0) {
                jugadorPierde = true;
                finPelea = true;
                derrota.setVisible(true);
                derrotaButtom.setVisible(true);
                reintentar.setVisible(true);
                salirDelJuego.setVisible(true);
            } else if (fuggie.getVida() <= 0) {
                jugadorGana = true;
                finPelea = true;
                victoria.setVisible(true);
                victoriaButtom.setVisible(true);
            } else {
                gestionJuego();
            }

        }

        vidaFuggie.setText(fuggie.getVida().toString());
        magiaFuggie.setText(fuggie.getMp().toString());
        EscudoFuggie.setText(String.valueOf(fuggie.getDefensa()));

        /*Actualizamos los datos del personaje*/
        vidaPj.setText(alice.getVida().toString());
        manaPj.setText(alice.getMp().toString());
        escudoPj.setText(String.valueOf(alice.getDefensa()));
    }//GEN-LAST:event_bigSlamButtomSActionPerformed

    private void impactoMeteoricoButtomSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_impactoMeteoricoButtomSActionPerformed

        if (bloqueo == false) {
            JOptionPane.showMessageDialog(null, "HAS UTILIZADO IMPACTO METEORICO");

            double daño = ancelot.impactoMeteorico(alice);
            fuggie.quitarVida(daño, fuggie);
            if (daño == 0.00) {
                turno = true;
            } else {
                vidaFuggie.setText(fuggie.getVida().toString());
                magiaFuggie.setText(fuggie.getMp().toString());
                EscudoFuggie.setText(String.valueOf(fuggie.getDefensa()));

                /*Actualizamos los datos del personaje*/
                vidaPj.setText(alice.getVida().toString());
                manaPj.setText(alice.getMp().toString());
                escudoPj.setText(String.valueOf(alice.getDefensa()));
                turno = false;
            }

            /*Si se quedan sin vida alguno de los dos se acabe el combate*/
            if (alice.getVida() <= 0) {
                jugadorPierde = true;
                finPelea = true;
                derrota.setVisible(true);
                derrotaButtom.setVisible(true);
                reintentar.setVisible(true);
                salirDelJuego.setVisible(true);
            } else if (fuggie.getVida() <= 0) {
                jugadorGana = true;
                finPelea = true;
                victoria.setVisible(true);
                victoriaButtom.setVisible(true);

            } else {
                gestionJuego();
            }
        }

        vidaFuggie.setText(fuggie.getVida().toString());
        magiaFuggie.setText(fuggie.getMp().toString());
        EscudoFuggie.setText(String.valueOf(fuggie.getDefensa()));

        /*Actualizamos los datos del personaje*/
        vidaPj.setText(alice.getVida().toString());
        manaPj.setText(alice.getMp().toString());
        escudoPj.setText(String.valueOf(alice.getDefensa()));
    }//GEN-LAST:event_impactoMeteoricoButtomSActionPerformed

    private void posturaButtomSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_posturaButtomSActionPerformed

        if (bloqueo == false) {
            JOptionPane.showMessageDialog(null, "HAS UTILIZADO POSTURA DE VALKIRIA TU ATAQUE AUMENTA");

            double daño = ancelot.posturaDeValkiria(alice);
            if (daño == 0.00) {
                turno = true;
            } else {
                vidaFuggie.setText(fuggie.getVida().toString());
                magiaFuggie.setText(fuggie.getMp().toString());
                EscudoFuggie.setText(String.valueOf(fuggie.getDefensa()));

                /*Actualizamos los datos del personaje*/
                vidaPj.setText(alice.getVida().toString());
                manaPj.setText(alice.getMp().toString());
                escudoPj.setText(String.valueOf(alice.getDefensa()));
                turno = false;
            }

            /*Si se quedan sin vida alguno de los dos se acabe el combate*/
            if (alice.getVida() <= 0) {
                jugadorPierde = true;
                finPelea = true;
                derrota.setVisible(true);
                derrotaButtom.setVisible(true);
                reintentar.setVisible(true);
                salirDelJuego.setVisible(true);
            } else if (fuggie.getVida() <= 0) {
                jugadorGana = true;
                finPelea = true;
                victoria.setVisible(true);
                victoriaButtom.setVisible(true);
            } else {
                gestionJuego();
            }

        }

        vidaFuggie.setText(fuggie.getVida().toString());
        magiaFuggie.setText(fuggie.getMp().toString());
        EscudoFuggie.setText(String.valueOf(fuggie.getDefensa()));

        /*Actualizamos los datos del personaje*/
        vidaPj.setText(alice.getVida().toString());
        manaPj.setText(alice.getMp().toString());
        escudoPj.setText(String.valueOf(alice.getDefensa()));
    }//GEN-LAST:event_posturaButtomSActionPerformed

    private void rompeCorazonesButtomSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rompeCorazonesButtomSActionPerformed

        if (bloqueo == false) {
            JOptionPane.showMessageDialog(null, "HAS UTILIZADO ROMPE CORAZONES");
            ancelot.quebrantadorDeCorazones(fuggie);
            turno = false;
            vidaFuggie.setText(fuggie.getVida().toString());
            magiaFuggie.setText(fuggie.getMp().toString());
            EscudoFuggie.setText(String.valueOf(fuggie.getDefensa()));

            /*Actualizamos los datos del personaje*/
            vidaPj.setText(alice.getVida().toString());
            manaPj.setText(alice.getMp().toString());
            escudoPj.setText(String.valueOf(alice.getDefensa()));
            gestionJuego();
        }

        vidaFuggie.setText(fuggie.getVida().toString());
        magiaFuggie.setText(fuggie.getMp().toString());
        EscudoFuggie.setText(String.valueOf(fuggie.getDefensa()));

        /*Actualizamos los datos del personaje*/
        vidaPj.setText(alice.getVida().toString());
        manaPj.setText(alice.getMp().toString());
        escudoPj.setText(String.valueOf(alice.getDefensa()));
    }//GEN-LAST:event_rompeCorazonesButtomSActionPerformed

    private void siguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_siguienteActionPerformed
        Icon imgCombate;
        imgCombate = new ImageIcon(getClass().getResource("../imagenes/imagenes/interfazCombateRED.png"));
        fondoLabel.setIcon(imgCombate);

        /*quitamos el bloqueo*/
        /*El label de bloqueo que hemos puesto para que no se puedan usar los botones s cuando se esta en la selección de habilidades*/
        bloqueo = false;

        /*HACEMOS INVISIBLES LA DESCRIPCIÓN DE LAS SKILLS*/
        desHabilidadesLabel.setVisible(false);

        vidaFuggie.setText(fuggie.getVida().toString());
        magiaFuggie.setText(fuggie.getMp().toString());
        EscudoFuggie.setText(String.valueOf(fuggie.getDefensa()));

        vidaPj.setText(alice.getVida().toString());
        manaPj.setText(alice.getMp().toString());
        escudoPj.setText(String.valueOf(alice.getDefensa()));

        vidaFuggie.setVisible(true);
        magiaFuggie.setVisible(true);
        EscudoFuggie.setVisible(true);

        /*Habilidades*/
        slamButtom.setVisible(false);
        bigSlamButtom1.setVisible(false);
        impactoMeteoricoButtom.setVisible(false);
        rompeCorazonesButtom.setVisible(false);
        castigoDivinoButtom.setVisible(false);
        posturaButtom.setVisible(false);
        /*-------*/
        siguiente.setVisible(false);
        labelEnemigo.setVisible(true);
        personajeButtom.setVisible(true);
        vidFuggieLabel.setVisible(true);
        fueguitoButtom.setVisible(true);
        fueguitoReducido.setVisible(true);
        protaImg.setVisible(true);

        turno = true;

        gestionJuego();

    }//GEN-LAST:event_siguienteActionPerformed

    private void fueguitoButtomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fueguitoButtomActionPerformed
        fueguitoDurmiendo.setVisible(true);
        okButtom.setVisible(true);
        fueguitoButtom.setVisible(false);
        fueguitoReducido.setVisible(false);

        /*ocultamos las habilidades*/
        slamButtomS.setVisible(false);
        bigSlamButtomS.setVisible(false);
        impactoMeteoricoButtomS.setVisible(false);
        rompeCorazonesButtomS.setVisible(false);
        posturaButtomS.setVisible(false);


    }//GEN-LAST:event_fueguitoButtomActionPerformed

    private void botonPersonajeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonPersonajeActionPerformed
        switch (contBotonPersonaje) {
            case 0:
                protaImg.setVisible(false);
                vidaPj.setVisible(true);
                manaPj.setVisible(true);
                escudoPj.setVisible(true);
                pjStats.setVisible(true);
                contBotonPersonaje++;

                vidaPj.setText(alice.getVida().toString());
                manaPj.setText(alice.getMp().toString());
                escudoPj.setText(String.valueOf(alice.getDefensa()));
                break;
            case 1:
                protaImg.setVisible(true);
                vidaPj.setVisible(false);
                manaPj.setVisible(false);
                escudoPj.setVisible(false);
                pjStats.setVisible(false);

                vidaPj.setText(alice.getVida().toString());
                manaPj.setText(alice.getMp().toString());
                escudoPj.setText(String.valueOf(alice.getDefensa()));

                contBotonPersonaje = 0;
                break;

        }
    }//GEN-LAST:event_botonPersonajeActionPerformed

    private void personajeButtomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_personajeButtomActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_personajeButtomActionPerformed

    private void okButtomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtomActionPerformed
        okButtom.setVisible(false);
        fueguitoDurmiendo.setVisible(false);
        fueguitoButtom.setVisible(true);
        fueguitoReducido.setVisible(true);

        /*revelamos las habilidades*/
        slamButtomS.setVisible(true);
        bigSlamButtomS.setVisible(true);
        impactoMeteoricoButtomS.setVisible(true);
        rompeCorazonesButtomS.setVisible(true);
        posturaButtomS.setVisible(true);


    }//GEN-LAST:event_okButtomActionPerformed

    private void derrotaButtomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_derrotaButtomActionPerformed

        derrotaButtom.setVisible(false);
        derrota.setVisible(false);
        estasMuerto.setVisible(true);

        fueguitoButtom.setVisible(false);
        fueguitoReducido.setVisible(false);


    }//GEN-LAST:event_derrotaButtomActionPerformed

    private void salirDelJuegoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirDelJuegoActionPerformed
        dispose();
    }//GEN-LAST:event_salirDelJuegoActionPerformed

    private void reintentarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reintentarActionPerformed

        /*200,250,100*/
        /*Devolvemos al inicio los styats del personaje*/
        alice.setVida(200.0);
        alice.setMp(250.0);
        alice.setDefensa(100);

        /*lo mismo con el enemigo*/
        fuggie.setVida(50.0);
        fuggie.setMp(10.0);
        fuggie.setDefensa(1000000);

        new CombateTutorial().setVisible(true);
        dispose();
    }//GEN-LAST:event_reintentarActionPerformed

    private void victoriaButtomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_victoriaButtomActionPerformed
        siguienteFase.setVisible(true);
        guardar.setVisible(true);
        guardarButtom.setVisible(true);
        estapaCompletada.setVisible(true);

        slamButtomS.setVisible(false);
        bigSlamButtomS.setVisible(false);
        impactoMeteoricoButtomS.setVisible(false);
        fueguitoButtom.setVisible(false);
        fueguitoReducido.setVisible(false);
        rompeCorazonesButtomS.setVisible(false);
        posturaButtomS.setVisible(false);

        alice.subirDeNivel(alice);
    }//GEN-LAST:event_victoriaButtomActionPerformed

    private void guardarButtomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarButtomActionPerformed
        Titulo.setSave(1);
        partidaGuardada.setVisible(true);
        JOptionPane.showMessageDialog(null, "El valor de la variable es " + Integer.toString(Titulo.getSave()));
    }//GEN-LAST:event_guardarButtomActionPerformed

    private void siguienteFaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_siguienteFaseActionPerformed

        new Capitulo1().setVisible(true);
        dispose();
    }//GEN-LAST:event_siguienteFaseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CombateTutorial.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CombateTutorial.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CombateTutorial.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CombateTutorial.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                new CombateTutorial().setVisible(true);

            }

        });

    }

    /*GESTION DEL JUEGO*/

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel EscudoFuggie;
    private javax.swing.JButton bigSlamButtom1;
    private static javax.swing.JButton bigSlamButtomS;
    private javax.swing.JButton botonPersonaje;
    private javax.swing.JButton castigoDivinoButtom;
    private javax.swing.JLabel derrota;
    private javax.swing.JButton derrotaButtom;
    private javax.swing.JLabel desHabilidadesLabel;
    private javax.swing.JLabel escudoPj;
    private javax.swing.JLabel estapaCompletada;
    private javax.swing.JLabel estasMuerto;
    private javax.swing.JLabel fondoLabel;
    private javax.swing.JButton fueguitoButtom;
    private javax.swing.JLabel fueguitoDurmiendo;
    private javax.swing.JLabel fueguitoReducido;
    private javax.swing.JLabel guardar;
    private javax.swing.JButton guardarButtom;
    private javax.swing.JButton impactoMeteoricoButtom;
    private static javax.swing.JButton impactoMeteoricoButtomS;
    private javax.swing.JLabel labelEnemigo;
    private javax.swing.JLabel magiaFuggie;
    private javax.swing.JLabel manaPj;
    private javax.swing.JButton okButtom;
    private javax.swing.JLabel partidaGuardada;
    private javax.swing.JButton personajeButtom;
    private javax.swing.JLabel pjStats;
    private javax.swing.JButton posturaButtom;
    private static javax.swing.JButton posturaButtomS;
    private javax.swing.JLabel protaImg;
    private javax.swing.JButton reintentar;
    private javax.swing.JButton rompeCorazonesButtom;
    private static javax.swing.JButton rompeCorazonesButtomS;
    private javax.swing.JButton salirDelJuego;
    private javax.swing.JButton siguiente;
    private javax.swing.JButton siguienteFase;
    private javax.swing.JButton slamButtom;
    private static javax.swing.JButton slamButtomS;
    private javax.swing.JLabel victoria;
    private javax.swing.JButton victoriaButtom;
    private javax.swing.JLabel vidFuggieLabel;
    private javax.swing.JLabel vidaFuggie;
    private javax.swing.JLabel vidaPj;
    // End of variables declaration//GEN-END:variables
}
